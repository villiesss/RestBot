import telebot
from telebot import types
from telebot.async_telebot import AsyncTeleBot
import asyncio

from hooks import send_to_ai

API_TOKEN = "8009070541:AAEZNsDkGA9tBd5JheaMHrbytzI3jLyFVW8"
bot = AsyncTeleBot(API_TOKEN)

# –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π
menu_data = {
    "–ü–∏—Ü—Ü–∞": {"–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": 400, "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏": 450, "–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞": 500, "–í–µ—Ç—á–∏–Ω–∞ –≥—Ä–∏–±—ã": 550},
    "–°—É—à–∏": {"–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è": 600, "–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è": 550, "–£–Ω–∞–≥–∏": 650},
    "–°—É–ø": {"–ë–æ—Ä—â": 300, "–°–æ–ª—è–Ω–∫–∞": 350, "–ì—Ä–∏–±–Ω–æ–π": 250},
    "–ù–∞–ø–∏—Ç–∫–∏": {"–ö–æ–ª–∞": 100, "–í–æ–¥–∞": 80, "–°–æ–∫": 120, "–ß–∞–π": 100}
}

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

def get_user_state(user_id):
    if user_id not in user_states:
        user_states[user_id] = {
            "current_section": None,
            "cart": {},
            "last_message": None
        }
    return user_states[user_id]

# –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é
def build_menu_keyboard(items, prices):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for item in items:
        price = prices[item]
        text = f"{item} - {price}‚ÇΩ"
        markup.add(types.InlineKeyboardButton(text=text, callback_data=f"add:{item}"))
    markup.add(types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    return markup

# –§–æ—Ä–º–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–æ—Ä–∑–∏–Ω—ã
# –†–µ–∞–ª–∏–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
def build_cart_keyboard(cart):
    markup = types.InlineKeyboardMarkup(row_width=1)

    for item, qty in cart.items():
        price = None
        for section in menu_data.values():
            if item in section:
                price = section[item]
                break

        if price is None:
            continue

        row = []
        row.append(types.InlineKeyboardButton(
            text=f"‚ûñ {item}",
            callback_data=f"remove_one:{item}"
        ))
        row.append(types.InlineKeyboardButton(
            text=f"{qty} —à—Ç",
            callback_data=f"show_item:{item}"
        ))
        row.append(types.InlineKeyboardButton(
            text=f"‚ûï {item}",
            callback_data=f"add_one:{item}"
        ))
        markup.row(*row)

    markup.add(types.InlineKeyboardButton(
        text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
        callback_data="clear_cart"
    ))
    markup.add(types.InlineKeyboardButton(
        text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
        callback_data="checkout"
    ))
    markup.add(types.InlineKeyboardButton(
        text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        callback_data="menu"
    ))
    return markup

# –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
def get_cart_text(cart):
    if not cart:
        return "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0

    for item, qty in cart.items():
        price = None
        for section in menu_data.values():
            if item in section:
                price = section[item]
                break

        if price is None:
            continue

        item_total = price * qty
        cart_text += f"‚ñ™ {item} - {qty} √ó {price}‚ÇΩ = {item_total}‚ÇΩ\n"
        total += item_total

    cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    return cart_text

# –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_cart_message(chat_id, message_id, user_state):
    cart = user_state["cart"]
    cart_text = get_cart_text(cart)
    markup = build_cart_keyboard(cart)

    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=cart_text,
            reply_markup=markup
        )
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            print(f"Error updating cart message: {e}")

# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(commands=["start"])
async def start_message(message):
    user_state = get_user_state(message.from_user.id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üçΩ –ú–µ–Ω—é", callback_data="menu"))
    markup.add(types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"))
    markup.add(types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"))
    sent_message = await bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, —è –†–µ—Å—Ç–æ–±–æ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )
    user_state["last_message"] = sent_message.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
async def handle_callback(call):
    user_id = call.from_user.id
    user_state = get_user_state(user_id)
    data = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    try:
        if data == "help":
            await bot.answer_callback_query(call.id)
            await bot.send_message(
                chat_id,
                "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É!\n\n"
                "1. –ù–∞–∂–º–∏ '–ú–µ–Ω—é' –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª—é–¥\n"
                "2. –î–æ–±–∞–≤–ª—è–π —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
                "3. –ü–µ—Ä–µ–π–¥–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
                "4. –ê –µ—â–µ —è —É–º–µ—é –∏—Å–∫–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–µ–Ω—é. –û—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç '/find –±–æ—Ä—â' (–∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ) –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–≥–æ –Ω–∞–π—Ç–∏!\n\n"
                "–ê –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ö–æ—á–µ—Ç—Å—è –ø–æ–±–æ–ª—Ç–∞—Ç—å, —Ç–æ –ø–∏—à–∏ –≤ —á–∞—Ç –≤—Å—ë, —á—Ç–æ —Ö–æ—á–µ—à—å! –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å)"
            )

        elif data == "menu":
            user_state["current_section"] = None
            markup = types.InlineKeyboardMarkup(row_width=1)
            for section in menu_data.keys():
                markup.add(types.InlineKeyboardButton(
                    text=section,
                    callback_data=f"section:{section}"
                ))
            markup.add(types.InlineKeyboardButton(
                text="‚¨Ö –ù–∞–∑–∞–¥",
                callback_data="back"
            ))
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="üçΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=markup
            )

        elif data.startswith("section:"):
            section = data.split(":")[1]
            user_state["current_section"] = section
            items = list(menu_data[section].keys())
            prices = menu_data[section]
            markup = build_menu_keyboard(items, prices)
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üç¥ {section}: –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ",
                reply_markup=markup
            )

        elif data == "back_to_categories":
            user_state["current_section"] = None
            markup = types.InlineKeyboardMarkup(row_width=1)
            for section in menu_data.keys():
                markup.add(types.InlineKeyboardButton(
                    text=section,
                    callback_data=f"section:{section}"
                ))
            markup.add(types.InlineKeyboardButton(
                text="‚¨Ö –ù–∞–∑–∞–¥",
                callback_data="back"
            ))
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="üçΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=markup
            )

        elif data.startswith("add:"):
            item = data.split(":")[1]
            if item in user_state["cart"]:
                user_state["cart"][item] += 1
            else:
                user_state["cart"][item] = 1

            await bot.answer_callback_query(call.id, text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {item}")
            section = user_state["current_section"]
            items = list(menu_data[section].keys())
            prices = menu_data[section]
            markup = build_menu_keyboard(items, prices)

            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=f"üç¥ {section}: –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ",
                    reply_markup=markup
                )
            except Exception as e:
                if "message is not modified" not in str(e):
                    raise e

        elif data == "cart":
            await update_cart_message(chat_id, message_id, user_state)

        elif data.startswith("add_one:"):
            item = data.split(":")[1]
            if item in user_state["cart"]:
                user_state["cart"][item] += 1
            await update_cart_message(chat_id, message_id, user_state)
            await bot.answer_callback_query(call.id, text=f"–î–æ–±–∞–≤–ª–µ–Ω 1 {item}")

        elif data.startswith("remove_one:"):
            item = data.split(":")[1]
            if item in user_state["cart"]:
                user_state["cart"][item] -= 1
                if user_state["cart"][item] <= 0:
                    del user_state["cart"][item]

            if user_state["cart"]:
                await update_cart_message(chat_id, message_id, user_state)
            else:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
                )
            await bot.answer_callback_query(call.id, text=f"–£–¥–∞–ª–µ–Ω 1 {item}")

        elif data == "clear_cart":
            user_state["cart"].clear()
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
            )
            await bot.answer_callback_query(call.id, text="–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")

        elif data == "checkout":
            if not user_state["cart"]:
                await bot.answer_callback_query(call.id, text="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
                return

            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É."
            )
            user_state["cart"].clear()

        elif data == "back":
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("üçΩ –ú–µ–Ω—é", callback_data="menu"))
            markup.add(types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"))
            markup.add(types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"))
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=markup
            )

    except Exception as e:
        print(f"Error in callback handler: {e}")
        await bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –º–µ–Ω—é
@bot.message_handler(func=lambda m: True)
async def handle_text(message):
    if message.text.startswith('/find '):
        query = message.text[6:].lower()
        results = []

        for section, items in menu_data.items():
            for item, price in items.items():
                if query in item.lower():
                    results.append(f"{item} (–í —Ä–∞–∑–¥–µ–ª–µ: {section}) - {price}‚ÇΩ")

        if results:
            await bot.send_message(message.chat.id, "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n" + "\n".join(results))
        else:
            await bot.send_message(message.chat.id, "üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ò–ò
@bot.message_handler(func=lambda message: True)
async def fallback(message):
    response = send_to_ai(message.text)
    await bot.send_message(message.chat.id, response, parse_mode="Markdown")

asyncio.run(bot.polling())